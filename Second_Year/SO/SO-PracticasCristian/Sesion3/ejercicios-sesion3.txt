/////////////////////////////
******** EJERCICIO 1 ********
/////////////////////////////

#include<sys/types.h>
#include<unistd.h>		
#include<stdio.h>
#include<errno.h>
#include <stdlib.h>

int main(int argc, char * argv[])
{

	pid_t pid;
	pid = fork();
	int num = (int) strtol(argv[1],NULL,10);
	if(pid > 0){ // Es el proceso padre
		if(num % 4 == 0)
			printf("El numero %d es divisible por 4\n", num);
	}
	else if(pid == 0){ // Es el hijo
		if (num % 2 == 0)	
			printf("El numero %d es par\n", num);
	}
}

/////////////////////////////
******** EJERCICIO 2 ********
/////////////////////////////

Lo que hace el programa es declaras una variable global con valor 6 y un string cualquiera
llamado buf. En la función principal se declara una variable entera y una de tipo pid_t. Da
el valor 88 a la variable entera y procede a imprimir por pantalla el string de antes
mediante la función write en la salida estándar (STDOUT_FILENO).

Luego procede a crear el proceso hijo con la función fork y lo asigna a la variable tipo
pid_t pid. Si pid vale 0 se ejecuta el código del proceso hijo, que lo único que hace es
incrementar tanto la variable global como la entera var.

Si no vale 0 (es decir, su valor es el PID del proceso hijo) ejecuta el código del proceso
padre, que solamente hace un sleep de 1 segundo.

/////////////////////////////
******** EJERCICIO 4 ********
/////////////////////////////

#include<sys/types.h>
#include<unistd.h>		
#include<stdio.h>
#include<errno.h>
#include <stdlib.h>

int main ()
{

	int estado;
	int num_hijos = 5;
	pid_t pid;
	
	for (int i = 0; i < num_hijos; i++){
		pid = fork();

		if (pid == 0){ // El hijo imprime y muere
			printf("Soy el hijo con PID %i\n", getpid());
			exit(0);
		}
	}

	for(int i = 0; i < num_hijos; i++){
		pid = wait(&estado);
		printf("Ha finalizado el hijo con PID %i\n", pid);
		printf("Solo me quedan %d hijos vivos\n", num_hijos-i-1);
	}
}
	

/////////////////////////////
******** EJERCICIO 5 ********
/////////////////////////////

#include<sys/types.h>
#include<unistd.h>		
#include<stdio.h>
#include<errno.h>
#include <stdlib.h>

int main ()
{
	int estado;
	int num_hijos = 5;
	pid_t pids[num_hijos];
	
	for (int i = 0; i < num_hijos; i++){
		pids[i] = fork();

		if (pids[i] == 0){ // El hijo imprime y muere
			printf("Soy el hijo con PID %i\n", getpid());
			exit(0);
		}
	}

	int num_hijos_primer_for = num_hijos;
	int eliminados = 0;
	for(int i = 1; i < num_hijos+1; i++){
		if (i % 2 != 0){
			waitpid(pids[i-1], &estado);
			num_hijos_primer_for--;
			eliminados++;
			printf("Ha finalizado el hijo %d con PID %i\n",i, pids[i-1]);
			printf("Solo me quedan %d hijos vivos\n", num_hijos_primer_for);
		}
	}

	int num_hijos_segundo_for = num_hijos - eliminados;
	for(int i = 1; i < num_hijos+1; i++){
		if (i % 2 == 0){
			waitpid(pids[i-1], &estado);
			num_hijos_segundo_for--;
			printf("Ha finalizado el hijo %d con PID %i\n", i, pids[i-1]);
			printf("Solo me quedan %d hijos vivos\n", num_hijos_segundo_for);
		}
	}
}
